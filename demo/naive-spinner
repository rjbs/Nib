#!/usr/bin/env perl
use v5.38.0;

use lib 'lib';

use IO::Async::Loop;
use IO::Socket;
use Time::HiRes ();

use Nib::Config;
use Nib::Dev;

my $config = Nib::Config->read_file('nib.toml');

my $dev = Nib::Dev->new(config => $config);
my $loop = IO::Async::Loop->new;
$loop->add($dev);

my $state = $dev->get_state->get;

unless ($state->{effects}{select} eq '*ExtControl*') {
  say "Not currently in streaming mode, configuring...";
  $dev->set_streaming->get;
}

my @panels =
  grep {; $_->{shapeType} != 12 } # Skip the control panel!
  $dev->get_panel_position_data->get;

die "no panels found?!\n" unless @panels;

my @panel_ids;

{
  # We want the panels to chase, so we need them in order.  My first attempt to
  # do this was to use trig to find them radially around a centerpoint using
  # trig.  I failed.
  #
  # My new tactic is to pick one arbitrarily (lowest panel id, why not?), then
  # find all the ones nearest it.  Pick one of *those* arbitrarily, never
  # returning to one already visited, and repeat.  This should be pretty good,
  # although if I wanted this to work on a long linear shape, I'd want to try
  # to pick one of the extreme positions to start.
  my %unseen = map {; $_->{panelId} => $_ } @panels;

  my ($first) = sort {; $a <=> $b } keys %unseen;

  my $current = delete $unseen{ $first };
  push @panel_ids, $current->{panelId};

  my sub dist ($p1, $p2) {
    sqrt( ($p1->{x} - $p2->{x})**2 + ($p1->{y} - $p2->{y})**2 );
  }

  while (%unseen) {
    my %by_distance;
    for my $panel (values %unseen) {
      my $dist = dist($current, $panel);

      $by_distance{$dist} //= [];
      push $by_distance{ $dist }->@*, $panel;
    }

    my ($smallest_key) = sort {; $a <=> $b } keys %by_distance;
    my ($pick) = sort {; $a->{panelId} <=> $b->{panelId} }
                 $by_distance{ $smallest_key }->@*;

    $current = delete $unseen{ $pick->{panelId} };
    push @panel_ids, $current->{panelId};
  }
}

$dev->blackout->get;

$SIG{INT} = sub {
  $dev->blackout->get;
  die "Interrupted!\n";
};

my @colors = (
  [ 0xA0, 0x00, 0x00 ],
  [ 0x00, 0xA0, 0x00 ],
  [ 0x00, 0x00, 0xA0 ],
  [ 0xA0, 0xA0, 0xA0 ],
);

my $color = 0;

while (1) {
  for my $i (0 .. $#panel_ids) {
    $dev->set_panel($panel_ids[$i], $colors[$color]);
    Time::HiRes::sleep(0.20);
    $dev->set_panel($panel_ids[($i+1) % @panel_ids], [0,0,0]);
  }

  $color = ($color + 1) % @colors;
}
